// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mesh.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// per https://developers.google.com/protocol-buffers/docs/proto3

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum RouteError: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0

  /// Our node doesn't have a route to the requested destination anymore.
  case noRoute // = 1

  /// We received a nak while trying to forward on your behalf
  case gotNak // = 2
  case timeout // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .noRoute
    case 2: self = .gotNak
    case 3: self = .timeout
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .noRoute: return 1
    case .gotNak: return 2
    case .timeout: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension RouteError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [RouteError] = [
    .none,
    .noRoute,
    .gotNak,
    .timeout,
  ]
}

#endif  // swift(>=4.2)

//// Shared constants between device and phone
enum Constants: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// First enum must be zero, and we are just using this enum to
  case unused // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .unused
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unused
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unused: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Constants: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Constants] = [
    .unused,
  ]
}

#endif  // swift(>=4.2)

///*
///The frequency/regulatory region the user has selected.
///
///Note: In 1.0 builds (which must still be supported by the android app for a
///long time) this field will be unpopulated.
///
///If firmware is ever upgraded from an old 1.0ish build, the old
///MyNodeInfo.region string will be used to set UserPreferences.region and the
///old value will be no longer set.
enum RegionCode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unset // = 0
  case us // = 1
  case eu433 // = 2
  case eu865 // = 3
  case cn // = 4
  case jp // = 5
  case anz // = 6
  case kr // = 7
  case tw // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .unset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unset
    case 1: self = .us
    case 2: self = .eu433
    case 3: self = .eu865
    case 4: self = .cn
    case 5: self = .jp
    case 6: self = .anz
    case 7: self = .kr
    case 8: self = .tw
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unset: return 0
    case .us: return 1
    case .eu433: return 2
    case .eu865: return 3
    case .cn: return 4
    case .jp: return 5
    case .anz: return 6
    case .kr: return 7
    case .tw: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension RegionCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [RegionCode] = [
    .unset,
    .us,
    .eu433,
    .eu865,
    .cn,
    .jp,
    .anz,
    .kr,
    .tw,
  ]
}

#endif  // swift(>=4.2)

///*
///How the GPS hardware in this unit is operated.
///
///Note: This is independent of how our location is shared with other devices.  For that see LocationSharing
enum GpsOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// This is treated as GpsOpMobile - it is the default settting
  case gpsOpUnset // = 0

  /// This node is mobile and we should get GPS position at a rate governed by gps_update_rate
  case gpsOpMobile // = 2

  /// We should only use the GPS to get time (no location data should be acquired/stored)
  /// Once we have the time we treat gps_update_interval as MAXINT (i.e. sleep forever)
  case gpsOpTimeOnly // = 3

  /// GPS is always turned off - this mode is not recommended - use GpsOpTimeOnly instead
  case gpsOpDisabled // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .gpsOpUnset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .gpsOpUnset
    case 2: self = .gpsOpMobile
    case 3: self = .gpsOpTimeOnly
    case 4: self = .gpsOpDisabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .gpsOpUnset: return 0
    case .gpsOpMobile: return 2
    case .gpsOpTimeOnly: return 3
    case .gpsOpDisabled: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension GpsOperation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [GpsOperation] = [
    .gpsOpUnset,
    .gpsOpMobile,
    .gpsOpTimeOnly,
    .gpsOpDisabled,
  ]
}

#endif  // swift(>=4.2)

///* 
///How our location is shared with other nodes (or the local phone)
enum LocationSharing: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// This is the default and treated as LocEnabled)
  case locUnset // = 0

  /// We are sharing our location
  case locEnabled // = 1

  /// We are not sharing our location (if the unit has a GPS it will default to only get time - i.e. GpsOpTimeOnly)
  case locDisabled // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .locUnset
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .locUnset
    case 1: self = .locEnabled
    case 2: self = .locDisabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .locUnset: return 0
    case .locEnabled: return 1
    case .locDisabled: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension LocationSharing: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [LocationSharing] = [
    .locUnset,
    .locEnabled,
    .locDisabled,
  ]
}

#endif  // swift(>=4.2)

/// a gps position
struct Position {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///* The new preferred location encoding, divide by 1e-7 to get degrees in
  /// floating point 
  var latitudeI: Int32 = 0

  var longitudeI: Int32 = 0

  ///* In meters above MSL 
  var altitude: Int32 = 0

  ///* 1-100 (0 means not provided) 
  var batteryLevel: Int32 = 0

  //// This is usually not sent over the mesh (to save space), but it is sent
  //// from the phone so that the local device can set its RTC If it is sent over
  //// the mesh (because there are devices on the mesh without GPS), it will only
  //// be sent by devices which has a hardware GPS clock.
  var time: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// a data message to forward to an external app (or possibly also be consumed
/// internally in the case of CLEAR_TEXT and CLEAR_READACK
struct DataMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// required
  var typ: DataMessage.TypeEnum = .opaque

  /// required
  var payload: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int

    //// A message sent from a device outside of the mesh, in a form the mesh
    //// does not understand
    case opaque // = 0

    //// a simple UTF-8 text message, which even the little micros in the mesh
    //// can understand and show on their screen eventually in some circumstances
    //// even signal might send messages in this form (see below)
    case clearText // = 1

    //// a message receive acknowledgement, sent in cleartext - allows radio to
    //// show user that a message has been read by the recipient, optional
    case clearReadack // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .opaque
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .opaque
      case 1: self = .clearText
      case 2: self = .clearReadack
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .opaque: return 0
      case .clearText: return 1
      case .clearReadack: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension DataMessage.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [DataMessage.TypeEnum] = [
    .opaque,
    .clearText,
    .clearReadack,
  ]
}

#endif  // swift(>=4.2)

/// Broadcast when a newly powered mesh node wants to find a node num it can use
///// Sent from the phone over bluetooth to set the user id for the owner of this
///node.
///// Also sent from nodes to each other when a new node signs on (so all clients
///can have this info)
///
///The algorithm is as follows:
/// when a node starts up, it broadcasts their user and the normal flow is for all
///other nodes to reply with their User as well (so the new node can build its node
///db)
/// If a node ever receives a User (not just the first broadcast) message where
///the sender node number equals our node number, that indicates a collision has
///occurred and the following steps should happen:
///
///If the receiving node (that was already in the mesh)'s macaddr is LOWER than the
///new User who just tried to sign in: it gets to keep its nodenum.  We send a
///broadcast message of OUR User (we use a broadcast so that the other node can
///receive our message, considering we have the same id - it also serves to let
///observers correct their nodedb) - this case is rare so it should be okay.
///
///If any node receives a User where the macaddr is GTE than their local macaddr,
///they have been vetoed and should pick a new random nodenum (filtering against
///whatever it knows about the nodedb) and rebroadcast their User.
///
///A few nodenums are reserved and will never be requested:
///0xff - broadcast
///0 through 3 - for future use
struct User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// a globally unique ID string for this user.  In the case of
  var id: String = String()

  /// Signal that would mean +16504442323, for the default macaddr
  /// derived id it would be !<6 hexidecimal bytes>
  var longName: String = String()

  /// A VERY short name, ideally two characters.  Suitable
  var shortName: String = String()

  /// for a tiny OLED screen
  var macaddr: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

//// A message used in our Dynamic Source Routing protocol (RFC 4728 based)
struct RouteDiscovery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  ///The list of nodes this packet has visited so far
  var route: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The payload portion fo a packet, this is the actual bytes that are sent
/// inside a radio packet (because from/to are broken out by the comms library)
struct SubPacket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Only one of the following fields can be populated at a time
  var payload: SubPacket.OneOf_Payload? = nil

  var position: Position {
    get {
      if case .position(let v)? = payload {return v}
      return Position()
    }
    set {payload = .position(newValue)}
  }

  var data: DataMessage {
    get {
      if case .data(let v)? = payload {return v}
      return DataMessage()
    }
    set {payload = .data(newValue)}
  }

  var user: User {
    get {
      if case .user(let v)? = payload {return v}
      return User()
    }
    set {payload = .user(newValue)}
  }

  ///*
  ///A route request going from the requester
  var routeRequest: RouteDiscovery {
    get {
      if case .routeRequest(let v)? = payload {return v}
      return RouteDiscovery()
    }
    set {payload = .routeRequest(newValue)}
  }

  ///*
  ///A route reply
  var routeReply: RouteDiscovery {
    get {
      if case .routeReply(let v)? = payload {return v}
      return RouteDiscovery()
    }
    set {payload = .routeReply(newValue)}
  }

  ///*
  ///A failure in a routed message
  var routeError: RouteError {
    get {
      if case .routeError(let v)? = payload {return v}
      return .none
    }
    set {payload = .routeError(newValue)}
  }

  //// Not normally used, but for testing a sender can request that recipient
  //// responds in kind (i.e. if it received a position, it should unicast back
  //// its position).
  /// Note: that if you set this on a broadcast you will receive many replies.
  /// FIXME - unify (i.e. remove) this with the new reliable messaging at the
  /// MeshPacket level
  var wantResponse: Bool = false

  var ack: SubPacket.OneOf_Ack? = nil

  ///*
  ///This packet is a requested acknoledgement indicating that we have received
  ///the specified message ID.  This packet type can be used both for immediate
  ///(0 hops) messages or can be routed through multiple hops if dest is set.
  ///
  ///Note: As an optimization, recipients can _also_ populate a field in payload
  ///if they think the recipient would appreciate that extra state.
  var successID: UInt32 {
    get {
      if case .successID(let v)? = ack {return v}
      return 0
    }
    set {ack = .successID(newValue)}
  }

  ///* This is a nak, we failed to deliver this message.
  var failID: UInt32 {
    get {
      if case .failID(let v)? = ack {return v}
      return 0
    }
    set {ack = .failID(newValue)}
  }

  ///*
  ///The address of the destination node.
  ///
  ///This field is is filled in by the mesh radio device software, applicaiton
  ///layer software should never need it.
  ///
  ///RouteDiscovery messages _must_ populate this.  Other message types might need
  ///to if they are doing multihop routing.
  var dest: UInt32 = 0

  ///*
  ///The address of the original sender for this message.
  ///
  ///This field should _only_ be populated for reliable multihop packets (to keep
  ///packets small).
  var source: UInt32 = 0

  ///*
  ///Only used in route_error messages.  Indicates the original message ID that
  ///this message is reporting failure on.
  var originalID: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Only one of the following fields can be populated at a time
  enum OneOf_Payload: Equatable {
    case position(Position)
    case data(DataMessage)
    case user(User)
    ///*
    ///A route request going from the requester
    case routeRequest(RouteDiscovery)
    ///*
    ///A route reply
    case routeReply(RouteDiscovery)
    ///*
    ///A failure in a routed message
    case routeError(RouteError)

  #if !swift(>=4.1)
    static func ==(lhs: SubPacket.OneOf_Payload, rhs: SubPacket.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.position, .position): return {
        guard case .position(let l) = lhs, case .position(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.data, .data): return {
        guard case .data(let l) = lhs, case .data(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.user, .user): return {
        guard case .user(let l) = lhs, case .user(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.routeRequest, .routeRequest): return {
        guard case .routeRequest(let l) = lhs, case .routeRequest(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.routeReply, .routeReply): return {
        guard case .routeReply(let l) = lhs, case .routeReply(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.routeError, .routeError): return {
        guard case .routeError(let l) = lhs, case .routeError(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  enum OneOf_Ack: Equatable {
    ///*
    ///This packet is a requested acknoledgement indicating that we have received
    ///the specified message ID.  This packet type can be used both for immediate
    ///(0 hops) messages or can be routed through multiple hops if dest is set.
    ///
    ///Note: As an optimization, recipients can _also_ populate a field in payload
    ///if they think the recipient would appreciate that extra state.
    case successID(UInt32)
    ///* This is a nak, we failed to deliver this message.
    case failID(UInt32)

  #if !swift(>=4.1)
    static func ==(lhs: SubPacket.OneOf_Ack, rhs: SubPacket.OneOf_Ack) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.successID, .successID): return {
        guard case .successID(let l) = lhs, case .successID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.failID, .failID): return {
        guard case .failID(let l) = lhs, case .failID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// A full packet sent/received over the mesh
/// Note: For simplicity reasons (and that we want to keep over the radio packets
/// very small, we now assume that there is only _one_ SubPacket in each
/// MeshPacket).
struct MeshPacket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  ///The sending node number.
  ///
  ///Note: Our crypto implementation uses this field as well.  See
  ///docs/software/crypto.md for details.
  var from: UInt32 {
    get {return _storage._from}
    set {_uniqueStorage()._from = newValue}
  }

  ///*
  ///The (immediate) destination for this packet.  If we are using routing, the
  ///final destination will be in payload.dest
  var to: UInt32 {
    get {return _storage._to}
    set {_uniqueStorage()._to = newValue}
  }

  ///*
  ///Internally to the mesh radios we will route SubPackets encrypted per
  ///docs/software/crypto.md.  However, when a particular node has the correct
  ///key to decode a particular packet, it will decode the payload into a SubPacket
  ///protobuf structure.
  ///
  ///Software outside of the device nodes will never encounter a packet where
  ///"decoded" is not populated (i.e. any encryption/decryption happens before
  ///reaching the applications)
  ///
  ///The numeric IDs for these fields were selected to keep backwards compatibility
  ///with old applications.
  var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var decoded: SubPacket {
    get {
      if case .decoded(let v)? = _storage._payload {return v}
      return SubPacket()
    }
    set {_uniqueStorage()._payload = .decoded(newValue)}
  }

  var encrypted: Data {
    get {
      if case .encrypted(let v)? = _storage._payload {return v}
      return Data()
    }
    set {_uniqueStorage()._payload = .encrypted(newValue)}
  }

  ///*
  ///A unique ID for this packet.  Always 0 for no-ack packets or non broadcast
  ///packets (and therefore take zero bytes of space).  Otherwise a unique ID for
  ///this packet.  Useful for flooding algorithms.
  ///
  ///ID only needs to be unique on a _per sender_ basis.   And it only
  ///needs to be unique for a few minutes (long enough to last for the length of
  ///any ACK or the completion of a mesh broadcast flood).
  ///
  ///Note: Our crypto implementation uses this id as well.  See
  ///docs/software/crypto.md for details.
  var id: UInt32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  //// The time this message was received by the esp32 (secs since 1970).  Note:
  //// this field is _never_ sent on the radio link itself (to save space) Times
  //// are typically not sent over the mesh, but they will be added to any Packet
  //// (chain of SubPacket) sent to the phone (so the phone can know exact time
  //// of reception)
  var rxTime: UInt32 {
    get {return _storage._rxTime}
    set {_uniqueStorage()._rxTime = newValue}
  }

  //// *Never* sent over the radio links.  Set during reception to indicate the
  //// SNR
  //// of this packet.  Used to collect statistics on current link waulity.
  var rxSnr: Float {
    get {return _storage._rxSnr}
    set {_uniqueStorage()._rxSnr = newValue}
  }

  ///*
  ///If unset treated as zero (no fowarding, send to adjacent nodes only)
  ///if 1, allow hopping through one node, etc...
  ///
  ///For our usecase real world topologies probably have a max of about 3.
  ///
  ///This field is normally placed into a few of bits in the header.
  var hopLimit: UInt32 {
    get {return _storage._hopLimit}
    set {_uniqueStorage()._hopLimit = newValue}
  }

  ///*
  ///This packet is being sent as a reliable message, we would prefer it to arrive
  ///at the destination.  We would like to receive a ack packet in response.
  ///
  ///Broadcasts messages treat this flag specially: Since acks for broadcasts would
  ///rapidly flood the channel, the normal ack behavior is suppressed.  Instead,
  ///the original sender listens to see if at least one node is rebroadcasting this
  ///packet (because naive flooding algoritm).  If it hears that the odds (given
  ///typical LoRa topologies) the odds are very high that every node should
  ///eventually receive the message.  So FloodingRouter.cpp generates an implicit
  ///ack which is delivered to the original sender. If after some time we don't
  ///hear anyone rebroadcast our packet, we will timeout and retransmit, using the
  ///regular resend logic.
  ///
  ///Note: This flag is normally sent in a flag bit in the header when sent over
  ///the wire
  var wantAck: Bool {
    get {return _storage._wantAck}
    set {_uniqueStorage()._wantAck = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  ///*
  ///Internally to the mesh radios we will route SubPackets encrypted per
  ///docs/software/crypto.md.  However, when a particular node has the correct
  ///key to decode a particular packet, it will decode the payload into a SubPacket
  ///protobuf structure.
  ///
  ///Software outside of the device nodes will never encounter a packet where
  ///"decoded" is not populated (i.e. any encryption/decryption happens before
  ///reaching the applications)
  ///
  ///The numeric IDs for these fields were selected to keep backwards compatibility
  ///with old applications.
  enum OneOf_Payload: Equatable {
    case decoded(SubPacket)
    case encrypted(Data)

  #if !swift(>=4.1)
    static func ==(lhs: MeshPacket.OneOf_Payload, rhs: MeshPacket.OneOf_Payload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.decoded, .decoded): return {
        guard case .decoded(let l) = lhs, case .decoded(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.encrypted, .encrypted): return {
        guard case .encrypted(let l) = lhs, case .encrypted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///* Full settings (center freq, spread factor, pre-shared secret key etc...)
///needed to configure a radio for speaking on a particlar channel This
///information can be encoded as a QRcode/url so that other users can configure
///their radio to join the same channel.
///
///A note aboute how channel names are shown to users:
///
///#channelname-Xy
///
///# is a prefix used to indicate this is a channel name (idea from @professr).
///
///Where X is a letter from A-Z (base 26) representing a hash of the PSK for this
///channel - so that if the user changes anything about the channel (which does
///force a new PSK) this letter will also change. Thus preventing user confusion if
///two friends try to type in a channel name of "BobsChan" and then can't talk
///because their PSKs will be different.  The PSK is hashed into this letter by
///"0x41 + [xor all bytes of the psk ] modulo 26"
///
///This also allows the option of someday if people have the PSK off (zero), the
///users COULD type in a channel name and be able to talk.
///
///Y is a lower case letter from a-z that represents the channel 'speed' settings
///(for some future definition of speed)
struct ChannelSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///*
  ///If zero then, use default max legal continuous power (ie. something that won't
  ///burn out the radio hardware)
  ///
  ///In most cases you should use zero here.
  var txPower: Int32 = 0

  //// Note: This is the 'old' mechanism for specifying channel parameters.
  //// Either modem_config or bandwidth/spreading/coding will be specified - NOT
  //// BOTH. As a heuristic: If bandwidth is specified, do not use modem_config.
  //// Because protobufs take ZERO space when the value is zero this works out
  //// nicely.
  ////
  //// This value is replaced by bandwidth/spread_factor/coding_rate.  If you'd
  //// like to experiment with other options add them to MeshRadio.cpp in the
  //// device code.
  var modemConfig: ChannelSettings.ModemConfig = .bw125Cr45Sf128

  ///*
  ///Bandwidth in MHz
  ///Certain bandwidth numbers are 'special' and will be converted to the
  ///appropriate floating point value: 31 -> 31.25MHz
  var bandwidth: UInt32 = 0

  ///*
  ///A number from 7 to 12.  Indicates number of chirps per symbol as
  ///1<<spread_factor.
  var spreadFactor: UInt32 = 0

  ///*
  ///The denominator of the coding rate.  ie for 4/8, the value is 8. 5/8 the value
  ///is 5.
  var codingRate: UInt32 = 0

  ///*
  ///A channel number between 1 and 13 (or whatever the max is in the current
  ///region). If ZERO then the rule is "use the old channel name hash based
  ///algoritm to derive the channel number")
  ///
  ///If using the hash algorithm the channel number will be: hash(channel_name) %
  ///NUM_CHANNELS (Where num channels depends on the regulatory region).
  ///NUM_CHANNELS_US is 13, for other values see MeshRadio.h in the device code.
  ///
  ///// hash a string into an integer - djb2 by Dan Bernstein. -
  ///// http://www.cse.yorku.ca/~oz/hash.html
  ///unsigned long hash(char *str) {
  ///unsigned long hash = 5381; int c;
  ///
  ///while ((c = *str++) != 0)
  ///hash = ((hash << 5) + hash) + (unsigned char) c;
  ///
  ///return hash;
  ///}
  var channelNum: UInt32 = 0

  //// A simple preshared key for now for crypto.  Must be either 0 bytes (no
  //// crypto), 16 bytes (AES128), or 32 bytes (AES256)
  var psk: Data = Data()

  //// A SHORT name that will be packed into the URL.  Less than 12 bytes.
  //// Something for end users to call the channel
  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ModemConfig: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Note: these mappings must match ModemConfigChoice in the device code.
    case bw125Cr45Sf128 // = 0

    ////< on. Default medium range
    case bw500Cr45Sf128 // = 1

    ////< on. Fast+short range
    case bw3125Cr48Sf512 // = 2

    ////< CRC on. Slow+long range
    case bw125Cr48Sf4096 // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .bw125Cr45Sf128
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .bw125Cr45Sf128
      case 1: self = .bw500Cr45Sf128
      case 2: self = .bw3125Cr48Sf512
      case 3: self = .bw125Cr48Sf4096
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .bw125Cr45Sf128: return 0
      case .bw500Cr45Sf128: return 1
      case .bw3125Cr48Sf512: return 2
      case .bw125Cr48Sf4096: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension ChannelSettings.ModemConfig: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ChannelSettings.ModemConfig] = [
    .bw125Cr45Sf128,
    .bw500Cr45Sf128,
    .bw3125Cr48Sf512,
    .bw125Cr48Sf4096,
  ]
}

#endif  // swift(>=4.2)

/// The entire set of user settable/readable settings for our radio device.
/// Includes both the current channel settings and any preferences the user has
/// set for behavior of their node
struct RadioConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var preferences: RadioConfig.UserPreferences {
    get {return _preferences ?? RadioConfig.UserPreferences()}
    set {_preferences = newValue}
  }
  /// Returns true if `preferences` has been explicitly set.
  var hasPreferences: Bool {return self._preferences != nil}
  /// Clears the value of `preferences`. Subsequent reads from it will return its default value.
  mutating func clearPreferences() {self._preferences = nil}

  var channelSettings: ChannelSettings {
    get {return _channelSettings ?? ChannelSettings()}
    set {_channelSettings = newValue}
  }
  /// Returns true if `channelSettings` has been explicitly set.
  var hasChannelSettings: Bool {return self._channelSettings != nil}
  /// Clears the value of `channelSettings`. Subsequent reads from it will return its default value.
  mutating func clearChannelSettings() {self._channelSettings = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct UserPreferences {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// We should send our position this often (but only if it has changed
    /// significantly)
    var positionBroadcastSecs: UInt32 {
      get {return _storage._positionBroadcastSecs}
      set {_uniqueStorage()._positionBroadcastSecs = newValue}
    }

    /// Send our owner info at least this often (also we always send once at boot
    /// - to rejoin the mesh)
    var sendOwnerInterval: UInt32 {
      get {return _storage._sendOwnerInterval}
      set {_uniqueStorage()._sendOwnerInterval = newValue}
    }

    //// If we miss this many owner messages from a node, we declare the node
    //// offline (defaults to 3 - to allow for some lost packets)
    var numMissedToFail: UInt32 {
      get {return _storage._numMissedToFail}
      set {_uniqueStorage()._numMissedToFail = newValue}
    }

    //// see sw-design.md
    var waitBluetoothSecs: UInt32 {
      get {return _storage._waitBluetoothSecs}
      set {_uniqueStorage()._waitBluetoothSecs = newValue}
    }

    /// 0 for default of one minute
    var screenOnSecs: UInt32 {
      get {return _storage._screenOnSecs}
      set {_uniqueStorage()._screenOnSecs = newValue}
    }

    /// 0 for default of 15 minutes
    var phoneTimeoutSecs: UInt32 {
      get {return _storage._phoneTimeoutSecs}
      set {_uniqueStorage()._phoneTimeoutSecs = newValue}
    }

    /// 0 for default of two hours, MAXUINT for disabled
    var phoneSdsTimeoutSec: UInt32 {
      get {return _storage._phoneSdsTimeoutSec}
      set {_uniqueStorage()._phoneSdsTimeoutSec = newValue}
    }

    /// 0 for default of two hours, MAXUINT for disabled
    var meshSdsTimeoutSecs: UInt32 {
      get {return _storage._meshSdsTimeoutSecs}
      set {_uniqueStorage()._meshSdsTimeoutSecs = newValue}
    }

    /// 0 for default of one year
    var sdsSecs: UInt32 {
      get {return _storage._sdsSecs}
      set {_uniqueStorage()._sdsSecs = newValue}
    }

    /// 0 for default of 3600
    var lsSecs: UInt32 {
      get {return _storage._lsSecs}
      set {_uniqueStorage()._lsSecs = newValue}
    }

    /// 0 for default of 10 seconds
    var minWakeSecs: UInt32 {
      get {return _storage._minWakeSecs}
      set {_uniqueStorage()._minWakeSecs = newValue}
    }

    ///* If set, this node will try to join the specified wifi network and
    /// acquire an address via DHCP 
    var wifiSsid: String {
      get {return _storage._wifiSsid}
      set {_uniqueStorage()._wifiSsid = newValue}
    }

    ///* If set, will be use to authenticate to the named wifi 
    var wifiPassword: String {
      get {return _storage._wifiPassword}
      set {_uniqueStorage()._wifiPassword = newValue}
    }

    ///* If set, the node will operate as an AP (and DHCP server), otherwise it
    /// will be a station 
    var wifiApMode: Bool {
      get {return _storage._wifiApMode}
      set {_uniqueStorage()._wifiApMode = newValue}
    }

    //// The region code for my radio (US, CN, EU433, etc...)
    var region: RegionCode {
      get {return _storage._region}
      set {_uniqueStorage()._region = newValue}
    }

    ///*
    ///Are we operating as a router.  Changes behavior in the following ways:
    ///FIXME
    var isRouter: Bool {
      get {return _storage._isRouter}
      set {_uniqueStorage()._isRouter = newValue}
    }

    ///*
    ///If set, we are powered from a low-current source (i.e. solar), so even if it looks like we have power flowing in
    ///we should try to minimize power consumption as much as possible.  Often combined with is_router.
    var isLowPower: Bool {
      get {return _storage._isLowPower}
      set {_uniqueStorage()._isLowPower = newValue}
    }

    ///*
    ///This setting is never saved to disk, but if set, all device settings will be
    ///returned to factory defaults.  (Region, serial number etc... will be
    ///preserved)
    var factoryReset: Bool {
      get {return _storage._factoryReset}
      set {_uniqueStorage()._factoryReset = newValue}
    }

    var locationShare: LocationSharing {
      get {return _storage._locationShare}
      set {_uniqueStorage()._locationShare = newValue}
    }

    var gpsOperation: GpsOperation {
      get {return _storage._gpsOperation}
      set {_uniqueStorage()._gpsOperation = newValue}
    }

    ///* How often should we try to get GPS position (in seconds) when we are in GpsOpMobile mode?
    ///or zero for the default of once every 30 seconds
    ///
    ///or a very large value (maxint) to update only once at boot.
    var gpsUpdateInterval: UInt32 {
      get {return _storage._gpsUpdateInterval}
      set {_uniqueStorage()._gpsUpdateInterval = newValue}
    }

    ///* How long should we try to get our position during each gps_update_interval attempt?  (in seconds)
    ///Or if zero, use the default of 30 seconds.
    ///If we don't get a new gps fix in that time, the gps will be put into sleep until  the next gps_update_rate
    ///window. 
    var gpsAttemptTime: UInt32 {
      get {return _storage._gpsAttemptTime}
      set {_uniqueStorage()._gpsAttemptTime = newValue}
    }

    ///*
    ///For testing it is useful sometimes to force a node to never listen to
    ///particular other nodes (simulating radio out of range). All nodenums listed
    ///in ignore_incoming will have packets they send droped on receive (by
    ///router.cpp)
    var ignoreIncoming: [UInt32] {
      get {return _storage._ignoreIncoming}
      set {_uniqueStorage()._ignoreIncoming = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _preferences: RadioConfig.UserPreferences? = nil
  fileprivate var _channelSettings: ChannelSettings? = nil
}

/// Full information about a node on the mesh
struct NodeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the node number
  var num: UInt32 = 0

  var user: User {
    get {return _user ?? User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  //// This position data will also contain a time last seen
  var position: Position {
    get {return _position ?? Position()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  //// Returns the Signal-to-noise ratio (SNR) of the last received message, as
  //// measured by the receiver. return SNR of the last received message in dB
  var snr: Float = 0

  //// Our current preferred node node for routing - might be the same as num if
  //// we are adjacent Or zero if we don't yet know a route to this node.
  var nextHop: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: User? = nil
  fileprivate var _position: Position? = nil
}

///*
///Unique local debugging info for this node
///
///Note: we don't include position or the user info, because that will come in the
///
///Sent to the phone in response to WantNodes.
struct MyNodeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// Tells the phone what our node number is, default starting value is lowbyte
  //// of macaddr, but it will be fixed if that is already in use
  var myNodeNum: UInt32 = 0

  ///*
  ///Note: this bool no longer means "we have our own GPS".  Because gps_operation is more advanced,
  ///but we'd like old phone apps to keep working.  So for legacy reasons we set this flag as follows:
  ///
  ///if false it would be great if the phone can help provide gps coordinates.  If true we don't need location
  ///assistance from the phone.
  var hasGps_p: Bool = false

  //// # of legal channels (set at build time in the device flash image)
  var numChannels: Int32 = 0

  ///* The region code for my radio (US, CN, etc...)
  ///Note: This string is deprecated.  The 1.0 builds populate it based on the
  ///flashed firmware name.  But for newer builds this string will be unpopulated
  ///(missing/null).  For those builds you should instead look at the new
  ///read/write region enum in UserSettings 
  ///
  ///The format of this string was 1.0-US or 1.0-CN etc.. Or empty string if unset.
  var region: String = String()

  //// TBEAM, HELTEC, etc...
  var hwModel: String = String()

  //// 0.0.5 etc...
  var firmwareVersion: String = String()

  //// An error message we'd like to report back to the mothership through
  //// analytics.  It indicates a serious bug occurred on the device, the device
  //// coped with it, but we still want to tell the devs about the bug. This
  //// field will be cleared after the phone reads MyNodeInfo (i.e. it will only
  //// be reported once) a numeric error code to go with error message, zero
  //// means no error
  var errorCode: UInt32 = 0

  //// A numeric error address (nonzero if available)
  var errorAddress: UInt32 = 0

  //// The total number of errors this node has ever encountered (well - since
  //// the last time we discarded preferences)
  var errorCount: UInt32 = 0

  ///* How many bits are used for the packetid.  If zero it is assumed we use
  ///eight bit packetids Old device loads (older that 0.6.5 do not populate this
  ///field, but all newer loads do). 
  var packetIDBits: UInt32 = 0

  ///* The current ID this node is using for sending new packets (exposed so that
  ///the phone can self assign packet IDs if it wishes by picking packet IDs from
  ///the opposite side of the pacekt ID space).
  ///
  ///Old device loads (older that 0.6.5 do not populate this field, but all newer
  ///loads do).
  ///
  ///FIXME: that we need to expose this is a bit of a mistake.  Really the phones
  ///should be modeled/treated as 1st class nodes like any other, and the radio
  ///connected to the phone just routes like any other. This would allow all sorts
  ///of clean/clever routing topologies in the future.
  var currentPacketID: UInt32 = 0

  ///* How many bits are used for the nodenum.  If zero it is assumed we use
  ///eight bit nodenums New device loads will user 32 bit nodenum.
  ///Old device loads (older that 0.6.5 do not populate this field, but all newer
  ///loads do). 
  var nodeNumBits: UInt32 = 0

  ///* How long before we consider a message abandoned and we can clear our
  ///caches of any messages in flight Normally quite large to handle the worst case
  ///message delivery time, 5 minutes.  Formerly called FLOOD_EXPIRE_TIME in the
  ///device code
  var messageTimeoutMsec: UInt32 = 0

  ///* The minimum app version that can talk to this device.  Android apps should
  ///compare this to their build number and if too low tell the user they must
  ///update their app
  var minAppVersion: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// This message is never sent over the wire, but it is used for serializing DB
/// state to flash in the device code
/// FIXME, since we write this each time we enter deep sleep (and have infinite
/// flash) it would be better to use some sort of append only data structure for
/// the receive queue and use the preferences store for the other stuff
struct DeviceState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var radio: RadioConfig {
    get {return _storage._radio ?? RadioConfig()}
    set {_uniqueStorage()._radio = newValue}
  }
  /// Returns true if `radio` has been explicitly set.
  var hasRadio: Bool {return _storage._radio != nil}
  /// Clears the value of `radio`. Subsequent reads from it will return its default value.
  mutating func clearRadio() {_uniqueStorage()._radio = nil}

  //// Read only settings/info about this node
  var myNode: MyNodeInfo {
    get {return _storage._myNode ?? MyNodeInfo()}
    set {_uniqueStorage()._myNode = newValue}
  }
  /// Returns true if `myNode` has been explicitly set.
  var hasMyNode: Bool {return _storage._myNode != nil}
  /// Clears the value of `myNode`. Subsequent reads from it will return its default value.
  mutating func clearMyNode() {_uniqueStorage()._myNode = nil}

  //// My owner info
  var owner: User {
    get {return _storage._owner ?? User()}
    set {_uniqueStorage()._owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  var hasOwner: Bool {return _storage._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  mutating func clearOwner() {_uniqueStorage()._owner = nil}

  var nodeDb: [NodeInfo] {
    get {return _storage._nodeDb}
    set {_uniqueStorage()._nodeDb = newValue}
  }

  //// Received packets saved for delivery to the phone
  var receiveQueue: [MeshPacket] {
    get {return _storage._receiveQueue}
    set {_uniqueStorage()._receiveQueue = newValue}
  }

  //// A version integer used to invalidate old save files when we make
  //// incompatible changes This integer is set at build time and is private to
  //// NodeDB.cpp in the device code.
  var version: UInt32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  //// We keep the last received text message (only) stored in the device flash,
  //// so we can show it on the screen.  Might be null
  var rxTextMessage: MeshPacket {
    get {return _storage._rxTextMessage ?? MeshPacket()}
    set {_uniqueStorage()._rxTextMessage = newValue}
  }
  /// Returns true if `rxTextMessage` has been explicitly set.
  var hasRxTextMessage: Bool {return _storage._rxTextMessage != nil}
  /// Clears the value of `rxTextMessage`. Subsequent reads from it will return its default value.
  mutating func clearRxTextMessage() {_uniqueStorage()._rxTextMessage = nil}

  //// Used only during development.  Indicates developer is testing and changes
  //// should never be saved to flash.
  var noSave: Bool {
    get {return _storage._noSave}
    set {_uniqueStorage()._noSave = newValue}
  }

  //// Some GPSes seem to have bogus settings from the factory, so we always do
  //// one factory reset
  var didGpsReset: Bool {
    get {return _storage._didGpsReset}
    set {_uniqueStorage()._didGpsReset = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

//// Debug output from the device
struct DebugString {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// packets from the radio to the phone will appear on the fromRadio
/// characteristic.  It will support READ and NOTIFY.  When a new packet arrives
/// the device will notify?  possibly identify instead? it will sit in that
/// descriptor until consumed by the phone, at which point the next item in the
/// FIFO will be populated.  FIXME
struct FromRadio {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The packet num, used to allow the phone to request missing read packets
  /// from the FIFO, see our bluetooth docs
  var num: UInt32 = 0

  var variant: FromRadio.OneOf_Variant? = nil

  var packet: MeshPacket {
    get {
      if case .packet(let v)? = variant {return v}
      return MeshPacket()
    }
    set {variant = .packet(newValue)}
  }

  //// Tells the phone what our node number is, can be -1 if we've not yet
  //// joined a mesh.
  /// REV2: In the rev 1 API this is in the BLE mynodeinfo characteristic
  var myInfo: MyNodeInfo {
    get {
      if case .myInfo(let v)? = variant {return v}
      return MyNodeInfo()
    }
    set {variant = .myInfo(newValue)}
  }

  //// One packet is sent for each node in the on radio DB
  /// REV2: In the rev1 API this is available in the nodeinfo characteristic
  /// starts over with the first node in our DB
  var nodeInfo: NodeInfo {
    get {
      if case .nodeInfo(let v)? = variant {return v}
      return NodeInfo()
    }
    set {variant = .nodeInfo(newValue)}
  }

  //// REV2: In rev1 this was the radio BLE characteristic
  var radio: RadioConfig {
    get {
      if case .radio(let v)? = variant {return v}
      return RadioConfig()
    }
    set {variant = .radio(newValue)}
  }

  //// REV2: set to send debug console output over our protobuf stream
  var debugString: DebugString {
    get {
      if case .debugString(let v)? = variant {return v}
      return DebugString()
    }
    set {variant = .debugString(newValue)}
  }

  //// REV2: sent as true once the device has finished sending all of the
  //// responses to want_config
  //// recipient should check if this ID matches our original request nonce, if
  //// not, it means your config responses haven't started yet
  var configCompleteID: UInt32 {
    get {
      if case .configCompleteID(let v)? = variant {return v}
      return 0
    }
    set {variant = .configCompleteID(newValue)}
  }

  //// Sent to tell clients the radio has just rebooted.  Set to true if
  //// present.  Not used on all transports, currently just used for the serial
  //// console.
  var rebooted: Bool {
    get {
      if case .rebooted(let v)? = variant {return v}
      return false
    }
    set {variant = .rebooted(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Variant: Equatable {
    case packet(MeshPacket)
    //// Tells the phone what our node number is, can be -1 if we've not yet
    //// joined a mesh.
    /// REV2: In the rev 1 API this is in the BLE mynodeinfo characteristic
    case myInfo(MyNodeInfo)
    //// One packet is sent for each node in the on radio DB
    /// REV2: In the rev1 API this is available in the nodeinfo characteristic
    /// starts over with the first node in our DB
    case nodeInfo(NodeInfo)
    //// REV2: In rev1 this was the radio BLE characteristic
    case radio(RadioConfig)
    //// REV2: set to send debug console output over our protobuf stream
    case debugString(DebugString)
    //// REV2: sent as true once the device has finished sending all of the
    //// responses to want_config
    //// recipient should check if this ID matches our original request nonce, if
    //// not, it means your config responses haven't started yet
    case configCompleteID(UInt32)
    //// Sent to tell clients the radio has just rebooted.  Set to true if
    //// present.  Not used on all transports, currently just used for the serial
    //// console.
    case rebooted(Bool)

  #if !swift(>=4.1)
    static func ==(lhs: FromRadio.OneOf_Variant, rhs: FromRadio.OneOf_Variant) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.packet, .packet): return {
        guard case .packet(let l) = lhs, case .packet(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.myInfo, .myInfo): return {
        guard case .myInfo(let l) = lhs, case .myInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.nodeInfo, .nodeInfo): return {
        guard case .nodeInfo(let l) = lhs, case .nodeInfo(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.radio, .radio): return {
        guard case .radio(let l) = lhs, case .radio(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.debugString, .debugString): return {
        guard case .debugString(let l) = lhs, case .debugString(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.configCompleteID, .configCompleteID): return {
        guard case .configCompleteID(let l) = lhs, case .configCompleteID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.rebooted, .rebooted): return {
        guard case .rebooted(let l) = lhs, case .rebooted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

/// packets/commands to the radio will be written (reliably) to the toRadio
/// characteristic.  Once the write completes the phone can assume it is handled.
struct ToRadio {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var variant: ToRadio.OneOf_Variant? = nil

  /// send this packet on the mesh
  var packet: MeshPacket {
    get {
      if case .packet(let v)? = variant {return v}
      return MeshPacket()
    }
    set {variant = .packet(newValue)}
  }

  //// REV2: phone wants radio to send full node db to the phone, This is
  //// typically the first packet sent to the radio when the phone gets a
  //// bluetooth connection. The radio will respond by sending back a
  //// MyNodeInfo, a owner, a radio config and a series of
  //// FromRadio.node_infos, and config_complete
  //// the integer you write into this field will be reported back in the
  //// config_complete_id response this allows clients to never be confused by
  //// a stale old partially sent config.
  var wantConfigID: UInt32 {
    get {
      if case .wantConfigID(let v)? = variant {return v}
      return 0
    }
    set {variant = .wantConfigID(newValue)}
  }

  //// REV2: In rev1 this was the radio config characteristic
  var setRadio: RadioConfig {
    get {
      if case .setRadio(let v)? = variant {return v}
      return RadioConfig()
    }
    set {variant = .setRadio(newValue)}
  }

  //// REV2: In rev1 this was the owner characteristic
  var setOwner: User {
    get {
      if case .setOwner(let v)? = variant {return v}
      return User()
    }
    set {variant = .setOwner(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Variant: Equatable {
    /// send this packet on the mesh
    case packet(MeshPacket)
    //// REV2: phone wants radio to send full node db to the phone, This is
    //// typically the first packet sent to the radio when the phone gets a
    //// bluetooth connection. The radio will respond by sending back a
    //// MyNodeInfo, a owner, a radio config and a series of
    //// FromRadio.node_infos, and config_complete
    //// the integer you write into this field will be reported back in the
    //// config_complete_id response this allows clients to never be confused by
    //// a stale old partially sent config.
    case wantConfigID(UInt32)
    //// REV2: In rev1 this was the radio config characteristic
    case setRadio(RadioConfig)
    //// REV2: In rev1 this was the owner characteristic
    case setOwner(User)

  #if !swift(>=4.1)
    static func ==(lhs: ToRadio.OneOf_Variant, rhs: ToRadio.OneOf_Variant) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.packet, .packet): return {
        guard case .packet(let l) = lhs, case .packet(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wantConfigID, .wantConfigID): return {
        guard case .wantConfigID(let l) = lhs, case .wantConfigID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.setRadio, .setRadio): return {
        guard case .setRadio(let l) = lhs, case .setRadio(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.setOwner, .setOwner): return {
        guard case .setOwner(let l) = lhs, case .setOwner(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

///*
///Placeholder for data we will eventually set during initial programming.  This
///will allow us to stop having a load for each region.
struct ManufacturingData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  //// center frequency for the radio hardware that was stuffed
  var fradioFreq: UInt32 = 0

  //// TBEAM, HELTEC, etc...
  var hwModel: String = String()

  /// Hardware version number
  var hwVersion: String = String()

  ///*
  ///This code is written during manfacturing time and allows users to confirm that
  ///the initial manufacturing tests succeeded.
  ///
  ///0 means no test performed.
  ///1 means all tests passed
  ///negative numbers indicate particular error codes
  var selftestResult: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RouteError: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "NO_ROUTE"),
    2: .same(proto: "GOT_NAK"),
    3: .same(proto: "TIMEOUT"),
  ]
}

extension Constants: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unused"),
  ]
}

extension RegionCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unset"),
    1: .same(proto: "US"),
    2: .same(proto: "EU433"),
    3: .same(proto: "EU865"),
    4: .same(proto: "CN"),
    5: .same(proto: "JP"),
    6: .same(proto: "ANZ"),
    7: .same(proto: "KR"),
    8: .same(proto: "TW"),
  ]
}

extension GpsOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GpsOpUnset"),
    2: .same(proto: "GpsOpMobile"),
    3: .same(proto: "GpsOpTimeOnly"),
    4: .same(proto: "GpsOpDisabled"),
  ]
}

extension LocationSharing: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LocUnset"),
    1: .same(proto: "LocEnabled"),
    2: .same(proto: "LocDisabled"),
  ]
}

extension Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    7: .standard(proto: "latitude_i"),
    8: .standard(proto: "longitude_i"),
    3: .same(proto: "altitude"),
    4: .standard(proto: "battery_level"),
    9: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.altitude) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.batteryLevel) }()
      case 7: try { try decoder.decodeSingularSInt32Field(value: &self.latitudeI) }()
      case 8: try { try decoder.decodeSingularSInt32Field(value: &self.longitudeI) }()
      case 9: try { try decoder.decodeSingularFixed32Field(value: &self.time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.altitude != 0 {
      try visitor.visitSingularInt32Field(value: self.altitude, fieldNumber: 3)
    }
    if self.batteryLevel != 0 {
      try visitor.visitSingularInt32Field(value: self.batteryLevel, fieldNumber: 4)
    }
    if self.latitudeI != 0 {
      try visitor.visitSingularSInt32Field(value: self.latitudeI, fieldNumber: 7)
    }
    if self.longitudeI != 0 {
      try visitor.visitSingularSInt32Field(value: self.longitudeI, fieldNumber: 8)
    }
    if self.time != 0 {
      try visitor.visitSingularFixed32Field(value: self.time, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Position, rhs: Position) -> Bool {
    if lhs.latitudeI != rhs.latitudeI {return false}
    if lhs.longitudeI != rhs.longitudeI {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.batteryLevel != rhs.batteryLevel {return false}
    if lhs.time != rhs.time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typ"),
    2: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.typ) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.typ != .opaque {
      try visitor.visitSingularEnumField(value: self.typ, fieldNumber: 1)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataMessage, rhs: DataMessage) -> Bool {
    if lhs.typ != rhs.typ {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPAQUE"),
    1: .same(proto: "CLEAR_TEXT"),
    2: .same(proto: "CLEAR_READACK"),
  ]
}

extension User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "long_name"),
    3: .standard(proto: "short_name"),
    4: .same(proto: "macaddr"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.longName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.shortName) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.macaddr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.longName.isEmpty {
      try visitor.visitSingularStringField(value: self.longName, fieldNumber: 2)
    }
    if !self.shortName.isEmpty {
      try visitor.visitSingularStringField(value: self.shortName, fieldNumber: 3)
    }
    if !self.macaddr.isEmpty {
      try visitor.visitSingularBytesField(value: self.macaddr, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: User, rhs: User) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.longName != rhs.longName {return false}
    if lhs.shortName != rhs.shortName {return false}
    if lhs.macaddr != rhs.macaddr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RouteDiscovery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RouteDiscovery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "route"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedInt32Field(value: &self.route) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.route.isEmpty {
      try visitor.visitPackedInt32Field(value: self.route, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RouteDiscovery, rhs: RouteDiscovery) -> Bool {
    if lhs.route != rhs.route {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SubPacket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SubPacket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    3: .same(proto: "data"),
    4: .same(proto: "user"),
    6: .standard(proto: "route_request"),
    7: .standard(proto: "route_reply"),
    13: .standard(proto: "route_error"),
    5: .standard(proto: "want_response"),
    10: .standard(proto: "success_id"),
    11: .standard(proto: "fail_id"),
    9: .same(proto: "dest"),
    12: .same(proto: "source"),
    2: .standard(proto: "original_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Position?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .position(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .position(v)}
      }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.originalID) }()
      case 3: try {
        var v: DataMessage?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .data(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .data(v)}
      }()
      case 4: try {
        var v: User?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .user(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .user(v)}
      }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.wantResponse) }()
      case 6: try {
        var v: RouteDiscovery?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .routeRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .routeRequest(v)}
      }()
      case 7: try {
        var v: RouteDiscovery?
        if let current = self.payload {
          try decoder.handleConflictingOneOf()
          if case .routeReply(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.payload = .routeReply(v)}
      }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.dest) }()
      case 10: try {
        if self.ack != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.ack = .successID(v)}
      }()
      case 11: try {
        if self.ack != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.ack = .failID(v)}
      }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.source) }()
      case 13: try {
        if self.payload != nil {try decoder.handleConflictingOneOf()}
        var v: RouteError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.payload = .routeError(v)}
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .position(let v)? = self.payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.originalID != 0 {
      try visitor.visitSingularUInt32Field(value: self.originalID, fieldNumber: 2)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.payload {
    case .data?: try {
      guard case .data(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .user?: try {
      guard case .user(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    default: break
    }
    if self.wantResponse != false {
      try visitor.visitSingularBoolField(value: self.wantResponse, fieldNumber: 5)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.payload {
    case .routeRequest?: try {
      guard case .routeRequest(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .routeReply?: try {
      guard case .routeReply(let v)? = self.payload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    default: break
    }
    if self.dest != 0 {
      try visitor.visitSingularUInt32Field(value: self.dest, fieldNumber: 9)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.ack {
    case .successID?: try {
      guard case .successID(let v)? = self.ack else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }()
    case .failID?: try {
      guard case .failID(let v)? = self.ack else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }()
    case nil: break
    }
    if self.source != 0 {
      try visitor.visitSingularUInt32Field(value: self.source, fieldNumber: 12)
    }
    if case .routeError(let v)? = self.payload {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SubPacket, rhs: SubPacket) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.wantResponse != rhs.wantResponse {return false}
    if lhs.ack != rhs.ack {return false}
    if lhs.dest != rhs.dest {return false}
    if lhs.source != rhs.source {return false}
    if lhs.originalID != rhs.originalID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MeshPacket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MeshPacket"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "from"),
    2: .same(proto: "to"),
    3: .same(proto: "decoded"),
    8: .same(proto: "encrypted"),
    6: .same(proto: "id"),
    9: .standard(proto: "rx_time"),
    7: .standard(proto: "rx_snr"),
    10: .standard(proto: "hop_limit"),
    11: .standard(proto: "want_ack"),
  ]

  fileprivate class _StorageClass {
    var _from: UInt32 = 0
    var _to: UInt32 = 0
    var _payload: MeshPacket.OneOf_Payload?
    var _id: UInt32 = 0
    var _rxTime: UInt32 = 0
    var _rxSnr: Float = 0
    var _hopLimit: UInt32 = 0
    var _wantAck: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _from = source._from
      _to = source._to
      _payload = source._payload
      _id = source._id
      _rxTime = source._rxTime
      _rxSnr = source._rxSnr
      _hopLimit = source._hopLimit
      _wantAck = source._wantAck
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._from) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._to) }()
        case 3: try {
          var v: SubPacket?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .decoded(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .decoded(v)}
        }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._id) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._rxSnr) }()
        case 8: try {
          if _storage._payload != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._payload = .encrypted(v)}
        }()
        case 9: try { try decoder.decodeSingularFixed32Field(value: &_storage._rxTime) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._hopLimit) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._wantAck) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._from != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._from, fieldNumber: 1)
      }
      if _storage._to != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._to, fieldNumber: 2)
      }
      if case .decoded(let v)? = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._id != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._id, fieldNumber: 6)
      }
      if _storage._rxSnr != 0 {
        try visitor.visitSingularFloatField(value: _storage._rxSnr, fieldNumber: 7)
      }
      if case .encrypted(let v)? = _storage._payload {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
      }
      if _storage._rxTime != 0 {
        try visitor.visitSingularFixed32Field(value: _storage._rxTime, fieldNumber: 9)
      }
      if _storage._hopLimit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._hopLimit, fieldNumber: 10)
      }
      if _storage._wantAck != false {
        try visitor.visitSingularBoolField(value: _storage._wantAck, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MeshPacket, rhs: MeshPacket) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._from != rhs_storage._from {return false}
        if _storage._to != rhs_storage._to {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._rxTime != rhs_storage._rxTime {return false}
        if _storage._rxSnr != rhs_storage._rxSnr {return false}
        if _storage._hopLimit != rhs_storage._hopLimit {return false}
        if _storage._wantAck != rhs_storage._wantAck {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChannelSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ChannelSettings"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tx_power"),
    3: .standard(proto: "modem_config"),
    6: .same(proto: "bandwidth"),
    7: .standard(proto: "spread_factor"),
    8: .standard(proto: "coding_rate"),
    9: .standard(proto: "channel_num"),
    4: .same(proto: "psk"),
    5: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.txPower) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.modemConfig) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.psk) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.bandwidth) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.spreadFactor) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.codingRate) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.channelNum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.txPower != 0 {
      try visitor.visitSingularInt32Field(value: self.txPower, fieldNumber: 1)
    }
    if self.modemConfig != .bw125Cr45Sf128 {
      try visitor.visitSingularEnumField(value: self.modemConfig, fieldNumber: 3)
    }
    if !self.psk.isEmpty {
      try visitor.visitSingularBytesField(value: self.psk, fieldNumber: 4)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 5)
    }
    if self.bandwidth != 0 {
      try visitor.visitSingularUInt32Field(value: self.bandwidth, fieldNumber: 6)
    }
    if self.spreadFactor != 0 {
      try visitor.visitSingularUInt32Field(value: self.spreadFactor, fieldNumber: 7)
    }
    if self.codingRate != 0 {
      try visitor.visitSingularUInt32Field(value: self.codingRate, fieldNumber: 8)
    }
    if self.channelNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.channelNum, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ChannelSettings, rhs: ChannelSettings) -> Bool {
    if lhs.txPower != rhs.txPower {return false}
    if lhs.modemConfig != rhs.modemConfig {return false}
    if lhs.bandwidth != rhs.bandwidth {return false}
    if lhs.spreadFactor != rhs.spreadFactor {return false}
    if lhs.codingRate != rhs.codingRate {return false}
    if lhs.channelNum != rhs.channelNum {return false}
    if lhs.psk != rhs.psk {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ChannelSettings.ModemConfig: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Bw125Cr45Sf128"),
    1: .same(proto: "Bw500Cr45Sf128"),
    2: .same(proto: "Bw31_25Cr48Sf512"),
    3: .same(proto: "Bw125Cr48Sf4096"),
  ]
}

extension RadioConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RadioConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "preferences"),
    2: .standard(proto: "channel_settings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._preferences) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._channelSettings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._preferences {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._channelSettings {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RadioConfig, rhs: RadioConfig) -> Bool {
    if lhs._preferences != rhs._preferences {return false}
    if lhs._channelSettings != rhs._channelSettings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RadioConfig.UserPreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = RadioConfig.protoMessageName + ".UserPreferences"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "position_broadcast_secs"),
    2: .standard(proto: "send_owner_interval"),
    3: .standard(proto: "num_missed_to_fail"),
    4: .standard(proto: "wait_bluetooth_secs"),
    5: .standard(proto: "screen_on_secs"),
    6: .standard(proto: "phone_timeout_secs"),
    7: .standard(proto: "phone_sds_timeout_sec"),
    8: .standard(proto: "mesh_sds_timeout_secs"),
    9: .standard(proto: "sds_secs"),
    10: .standard(proto: "ls_secs"),
    11: .standard(proto: "min_wake_secs"),
    12: .standard(proto: "wifi_ssid"),
    13: .standard(proto: "wifi_password"),
    14: .standard(proto: "wifi_ap_mode"),
    15: .same(proto: "region"),
    37: .standard(proto: "is_router"),
    38: .standard(proto: "is_low_power"),
    100: .standard(proto: "factory_reset"),
    32: .standard(proto: "location_share"),
    33: .standard(proto: "gps_operation"),
    34: .standard(proto: "gps_update_interval"),
    36: .standard(proto: "gps_attempt_time"),
    103: .standard(proto: "ignore_incoming"),
  ]

  fileprivate class _StorageClass {
    var _positionBroadcastSecs: UInt32 = 0
    var _sendOwnerInterval: UInt32 = 0
    var _numMissedToFail: UInt32 = 0
    var _waitBluetoothSecs: UInt32 = 0
    var _screenOnSecs: UInt32 = 0
    var _phoneTimeoutSecs: UInt32 = 0
    var _phoneSdsTimeoutSec: UInt32 = 0
    var _meshSdsTimeoutSecs: UInt32 = 0
    var _sdsSecs: UInt32 = 0
    var _lsSecs: UInt32 = 0
    var _minWakeSecs: UInt32 = 0
    var _wifiSsid: String = String()
    var _wifiPassword: String = String()
    var _wifiApMode: Bool = false
    var _region: RegionCode = .unset
    var _isRouter: Bool = false
    var _isLowPower: Bool = false
    var _factoryReset: Bool = false
    var _locationShare: LocationSharing = .locUnset
    var _gpsOperation: GpsOperation = .gpsOpUnset
    var _gpsUpdateInterval: UInt32 = 0
    var _gpsAttemptTime: UInt32 = 0
    var _ignoreIncoming: [UInt32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _positionBroadcastSecs = source._positionBroadcastSecs
      _sendOwnerInterval = source._sendOwnerInterval
      _numMissedToFail = source._numMissedToFail
      _waitBluetoothSecs = source._waitBluetoothSecs
      _screenOnSecs = source._screenOnSecs
      _phoneTimeoutSecs = source._phoneTimeoutSecs
      _phoneSdsTimeoutSec = source._phoneSdsTimeoutSec
      _meshSdsTimeoutSecs = source._meshSdsTimeoutSecs
      _sdsSecs = source._sdsSecs
      _lsSecs = source._lsSecs
      _minWakeSecs = source._minWakeSecs
      _wifiSsid = source._wifiSsid
      _wifiPassword = source._wifiPassword
      _wifiApMode = source._wifiApMode
      _region = source._region
      _isRouter = source._isRouter
      _isLowPower = source._isLowPower
      _factoryReset = source._factoryReset
      _locationShare = source._locationShare
      _gpsOperation = source._gpsOperation
      _gpsUpdateInterval = source._gpsUpdateInterval
      _gpsAttemptTime = source._gpsAttemptTime
      _ignoreIncoming = source._ignoreIncoming
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._positionBroadcastSecs) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._sendOwnerInterval) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._numMissedToFail) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._waitBluetoothSecs) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._screenOnSecs) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._phoneTimeoutSecs) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._phoneSdsTimeoutSec) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._meshSdsTimeoutSecs) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._sdsSecs) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._lsSecs) }()
        case 11: try { try decoder.decodeSingularUInt32Field(value: &_storage._minWakeSecs) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._wifiSsid) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._wifiPassword) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._wifiApMode) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._region) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._locationShare) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._gpsOperation) }()
        case 34: try { try decoder.decodeSingularUInt32Field(value: &_storage._gpsUpdateInterval) }()
        case 36: try { try decoder.decodeSingularUInt32Field(value: &_storage._gpsAttemptTime) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._isRouter) }()
        case 38: try { try decoder.decodeSingularBoolField(value: &_storage._isLowPower) }()
        case 100: try { try decoder.decodeSingularBoolField(value: &_storage._factoryReset) }()
        case 103: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._ignoreIncoming) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._positionBroadcastSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._positionBroadcastSecs, fieldNumber: 1)
      }
      if _storage._sendOwnerInterval != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sendOwnerInterval, fieldNumber: 2)
      }
      if _storage._numMissedToFail != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._numMissedToFail, fieldNumber: 3)
      }
      if _storage._waitBluetoothSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._waitBluetoothSecs, fieldNumber: 4)
      }
      if _storage._screenOnSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._screenOnSecs, fieldNumber: 5)
      }
      if _storage._phoneTimeoutSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._phoneTimeoutSecs, fieldNumber: 6)
      }
      if _storage._phoneSdsTimeoutSec != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._phoneSdsTimeoutSec, fieldNumber: 7)
      }
      if _storage._meshSdsTimeoutSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._meshSdsTimeoutSecs, fieldNumber: 8)
      }
      if _storage._sdsSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sdsSecs, fieldNumber: 9)
      }
      if _storage._lsSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lsSecs, fieldNumber: 10)
      }
      if _storage._minWakeSecs != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._minWakeSecs, fieldNumber: 11)
      }
      if !_storage._wifiSsid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._wifiSsid, fieldNumber: 12)
      }
      if !_storage._wifiPassword.isEmpty {
        try visitor.visitSingularStringField(value: _storage._wifiPassword, fieldNumber: 13)
      }
      if _storage._wifiApMode != false {
        try visitor.visitSingularBoolField(value: _storage._wifiApMode, fieldNumber: 14)
      }
      if _storage._region != .unset {
        try visitor.visitSingularEnumField(value: _storage._region, fieldNumber: 15)
      }
      if _storage._locationShare != .locUnset {
        try visitor.visitSingularEnumField(value: _storage._locationShare, fieldNumber: 32)
      }
      if _storage._gpsOperation != .gpsOpUnset {
        try visitor.visitSingularEnumField(value: _storage._gpsOperation, fieldNumber: 33)
      }
      if _storage._gpsUpdateInterval != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._gpsUpdateInterval, fieldNumber: 34)
      }
      if _storage._gpsAttemptTime != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._gpsAttemptTime, fieldNumber: 36)
      }
      if _storage._isRouter != false {
        try visitor.visitSingularBoolField(value: _storage._isRouter, fieldNumber: 37)
      }
      if _storage._isLowPower != false {
        try visitor.visitSingularBoolField(value: _storage._isLowPower, fieldNumber: 38)
      }
      if _storage._factoryReset != false {
        try visitor.visitSingularBoolField(value: _storage._factoryReset, fieldNumber: 100)
      }
      if !_storage._ignoreIncoming.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._ignoreIncoming, fieldNumber: 103)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RadioConfig.UserPreferences, rhs: RadioConfig.UserPreferences) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._positionBroadcastSecs != rhs_storage._positionBroadcastSecs {return false}
        if _storage._sendOwnerInterval != rhs_storage._sendOwnerInterval {return false}
        if _storage._numMissedToFail != rhs_storage._numMissedToFail {return false}
        if _storage._waitBluetoothSecs != rhs_storage._waitBluetoothSecs {return false}
        if _storage._screenOnSecs != rhs_storage._screenOnSecs {return false}
        if _storage._phoneTimeoutSecs != rhs_storage._phoneTimeoutSecs {return false}
        if _storage._phoneSdsTimeoutSec != rhs_storage._phoneSdsTimeoutSec {return false}
        if _storage._meshSdsTimeoutSecs != rhs_storage._meshSdsTimeoutSecs {return false}
        if _storage._sdsSecs != rhs_storage._sdsSecs {return false}
        if _storage._lsSecs != rhs_storage._lsSecs {return false}
        if _storage._minWakeSecs != rhs_storage._minWakeSecs {return false}
        if _storage._wifiSsid != rhs_storage._wifiSsid {return false}
        if _storage._wifiPassword != rhs_storage._wifiPassword {return false}
        if _storage._wifiApMode != rhs_storage._wifiApMode {return false}
        if _storage._region != rhs_storage._region {return false}
        if _storage._isRouter != rhs_storage._isRouter {return false}
        if _storage._isLowPower != rhs_storage._isLowPower {return false}
        if _storage._factoryReset != rhs_storage._factoryReset {return false}
        if _storage._locationShare != rhs_storage._locationShare {return false}
        if _storage._gpsOperation != rhs_storage._gpsOperation {return false}
        if _storage._gpsUpdateInterval != rhs_storage._gpsUpdateInterval {return false}
        if _storage._gpsAttemptTime != rhs_storage._gpsAttemptTime {return false}
        if _storage._ignoreIncoming != rhs_storage._ignoreIncoming {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NodeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NodeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "num"),
    2: .same(proto: "user"),
    3: .same(proto: "position"),
    7: .same(proto: "snr"),
    5: .standard(proto: "next_hop"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.num) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.nextHop) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self.snr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.num != 0 {
      try visitor.visitSingularUInt32Field(value: self.num, fieldNumber: 1)
    }
    if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.nextHop != 0 {
      try visitor.visitSingularUInt32Field(value: self.nextHop, fieldNumber: 5)
    }
    if self.snr != 0 {
      try visitor.visitSingularFloatField(value: self.snr, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NodeInfo, rhs: NodeInfo) -> Bool {
    if lhs.num != rhs.num {return false}
    if lhs._user != rhs._user {return false}
    if lhs._position != rhs._position {return false}
    if lhs.snr != rhs.snr {return false}
    if lhs.nextHop != rhs.nextHop {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MyNodeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MyNodeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "my_node_num"),
    2: .standard(proto: "has_gps"),
    3: .standard(proto: "num_channels"),
    4: .same(proto: "region"),
    5: .standard(proto: "hw_model"),
    6: .standard(proto: "firmware_version"),
    7: .standard(proto: "error_code"),
    8: .standard(proto: "error_address"),
    9: .standard(proto: "error_count"),
    10: .standard(proto: "packet_id_bits"),
    11: .standard(proto: "current_packet_id"),
    12: .standard(proto: "node_num_bits"),
    13: .standard(proto: "message_timeout_msec"),
    14: .standard(proto: "min_app_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.myNodeNum) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hasGps_p) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.numChannels) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.region) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.hwModel) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.firmwareVersion) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.errorCode) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.errorAddress) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.errorCount) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.packetIDBits) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.currentPacketID) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self.nodeNumBits) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self.messageTimeoutMsec) }()
      case 14: try { try decoder.decodeSingularUInt32Field(value: &self.minAppVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.myNodeNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.myNodeNum, fieldNumber: 1)
    }
    if self.hasGps_p != false {
      try visitor.visitSingularBoolField(value: self.hasGps_p, fieldNumber: 2)
    }
    if self.numChannels != 0 {
      try visitor.visitSingularInt32Field(value: self.numChannels, fieldNumber: 3)
    }
    if !self.region.isEmpty {
      try visitor.visitSingularStringField(value: self.region, fieldNumber: 4)
    }
    if !self.hwModel.isEmpty {
      try visitor.visitSingularStringField(value: self.hwModel, fieldNumber: 5)
    }
    if !self.firmwareVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.firmwareVersion, fieldNumber: 6)
    }
    if self.errorCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.errorCode, fieldNumber: 7)
    }
    if self.errorAddress != 0 {
      try visitor.visitSingularUInt32Field(value: self.errorAddress, fieldNumber: 8)
    }
    if self.errorCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.errorCount, fieldNumber: 9)
    }
    if self.packetIDBits != 0 {
      try visitor.visitSingularUInt32Field(value: self.packetIDBits, fieldNumber: 10)
    }
    if self.currentPacketID != 0 {
      try visitor.visitSingularUInt32Field(value: self.currentPacketID, fieldNumber: 11)
    }
    if self.nodeNumBits != 0 {
      try visitor.visitSingularUInt32Field(value: self.nodeNumBits, fieldNumber: 12)
    }
    if self.messageTimeoutMsec != 0 {
      try visitor.visitSingularUInt32Field(value: self.messageTimeoutMsec, fieldNumber: 13)
    }
    if self.minAppVersion != 0 {
      try visitor.visitSingularUInt32Field(value: self.minAppVersion, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MyNodeInfo, rhs: MyNodeInfo) -> Bool {
    if lhs.myNodeNum != rhs.myNodeNum {return false}
    if lhs.hasGps_p != rhs.hasGps_p {return false}
    if lhs.numChannels != rhs.numChannels {return false}
    if lhs.region != rhs.region {return false}
    if lhs.hwModel != rhs.hwModel {return false}
    if lhs.firmwareVersion != rhs.firmwareVersion {return false}
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.errorAddress != rhs.errorAddress {return false}
    if lhs.errorCount != rhs.errorCount {return false}
    if lhs.packetIDBits != rhs.packetIDBits {return false}
    if lhs.currentPacketID != rhs.currentPacketID {return false}
    if lhs.nodeNumBits != rhs.nodeNumBits {return false}
    if lhs.messageTimeoutMsec != rhs.messageTimeoutMsec {return false}
    if lhs.minAppVersion != rhs.minAppVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeviceState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "radio"),
    2: .standard(proto: "my_node"),
    3: .same(proto: "owner"),
    4: .standard(proto: "node_db"),
    5: .standard(proto: "receive_queue"),
    8: .same(proto: "version"),
    7: .standard(proto: "rx_text_message"),
    9: .standard(proto: "no_save"),
    11: .standard(proto: "did_gps_reset"),
  ]

  fileprivate class _StorageClass {
    var _radio: RadioConfig? = nil
    var _myNode: MyNodeInfo? = nil
    var _owner: User? = nil
    var _nodeDb: [NodeInfo] = []
    var _receiveQueue: [MeshPacket] = []
    var _version: UInt32 = 0
    var _rxTextMessage: MeshPacket? = nil
    var _noSave: Bool = false
    var _didGpsReset: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _radio = source._radio
      _myNode = source._myNode
      _owner = source._owner
      _nodeDb = source._nodeDb
      _receiveQueue = source._receiveQueue
      _version = source._version
      _rxTextMessage = source._rxTextMessage
      _noSave = source._noSave
      _didGpsReset = source._didGpsReset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._radio) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._myNode) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._owner) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._nodeDb) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._receiveQueue) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._rxTextMessage) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._version) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._noSave) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._didGpsReset) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._radio {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._myNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._owner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._nodeDb.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._nodeDb, fieldNumber: 4)
      }
      if !_storage._receiveQueue.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._receiveQueue, fieldNumber: 5)
      }
      if let v = _storage._rxTextMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 8)
      }
      if _storage._noSave != false {
        try visitor.visitSingularBoolField(value: _storage._noSave, fieldNumber: 9)
      }
      if _storage._didGpsReset != false {
        try visitor.visitSingularBoolField(value: _storage._didGpsReset, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceState, rhs: DeviceState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._radio != rhs_storage._radio {return false}
        if _storage._myNode != rhs_storage._myNode {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._nodeDb != rhs_storage._nodeDb {return false}
        if _storage._receiveQueue != rhs_storage._receiveQueue {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._rxTextMessage != rhs_storage._rxTextMessage {return false}
        if _storage._noSave != rhs_storage._noSave {return false}
        if _storage._didGpsReset != rhs_storage._didGpsReset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DebugString: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DebugString"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DebugString, rhs: DebugString) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FromRadio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FromRadio"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "num"),
    2: .same(proto: "packet"),
    3: .standard(proto: "my_info"),
    4: .standard(proto: "node_info"),
    6: .same(proto: "radio"),
    7: .standard(proto: "debug_string"),
    8: .standard(proto: "config_complete_id"),
    9: .same(proto: "rebooted"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.num) }()
      case 2: try {
        var v: MeshPacket?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .packet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .packet(v)}
      }()
      case 3: try {
        var v: MyNodeInfo?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .myInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .myInfo(v)}
      }()
      case 4: try {
        var v: NodeInfo?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .nodeInfo(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .nodeInfo(v)}
      }()
      case 6: try {
        var v: RadioConfig?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .radio(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .radio(v)}
      }()
      case 7: try {
        var v: DebugString?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .debugString(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .debugString(v)}
      }()
      case 8: try {
        if self.variant != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.variant = .configCompleteID(v)}
      }()
      case 9: try {
        if self.variant != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.variant = .rebooted(v)}
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.num != 0 {
      try visitor.visitSingularUInt32Field(value: self.num, fieldNumber: 1)
    }
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.variant {
    case .packet?: try {
      guard case .packet(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .myInfo?: try {
      guard case .myInfo(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .nodeInfo?: try {
      guard case .nodeInfo(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .radio?: try {
      guard case .radio(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .debugString?: try {
      guard case .debugString(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .configCompleteID?: try {
      guard case .configCompleteID(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }()
    case .rebooted?: try {
      guard case .rebooted(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FromRadio, rhs: FromRadio) -> Bool {
    if lhs.num != rhs.num {return false}
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ToRadio: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ToRadio"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "packet"),
    100: .standard(proto: "want_config_id"),
    101: .standard(proto: "set_radio"),
    102: .standard(proto: "set_owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: MeshPacket?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .packet(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .packet(v)}
      }()
      case 100: try {
        if self.variant != nil {try decoder.handleConflictingOneOf()}
        var v: UInt32?
        try decoder.decodeSingularUInt32Field(value: &v)
        if let v = v {self.variant = .wantConfigID(v)}
      }()
      case 101: try {
        var v: RadioConfig?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .setRadio(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .setRadio(v)}
      }()
      case 102: try {
        var v: User?
        if let current = self.variant {
          try decoder.handleConflictingOneOf()
          if case .setOwner(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.variant = .setOwner(v)}
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.variant {
    case .packet?: try {
      guard case .packet(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .wantConfigID?: try {
      guard case .wantConfigID(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 100)
    }()
    case .setRadio?: try {
      guard case .setRadio(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
    }()
    case .setOwner?: try {
      guard case .setOwner(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ToRadio, rhs: ToRadio) -> Bool {
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ManufacturingData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ManufacturingData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fradioFreq"),
    2: .standard(proto: "hw_model"),
    3: .standard(proto: "hw_version"),
    4: .standard(proto: "selftest_result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.fradioFreq) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hwModel) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hwVersion) }()
      case 4: try { try decoder.decodeSingularSInt32Field(value: &self.selftestResult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fradioFreq != 0 {
      try visitor.visitSingularUInt32Field(value: self.fradioFreq, fieldNumber: 1)
    }
    if !self.hwModel.isEmpty {
      try visitor.visitSingularStringField(value: self.hwModel, fieldNumber: 2)
    }
    if !self.hwVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.hwVersion, fieldNumber: 3)
    }
    if self.selftestResult != 0 {
      try visitor.visitSingularSInt32Field(value: self.selftestResult, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ManufacturingData, rhs: ManufacturingData) -> Bool {
    if lhs.fradioFreq != rhs.fradioFreq {return false}
    if lhs.hwModel != rhs.hwModel {return false}
    if lhs.hwVersion != rhs.hwVersion {return false}
    if lhs.selftestResult != rhs.selftestResult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
